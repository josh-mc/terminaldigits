dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)
expect_equal(a, b)
})
))
test_that("td_indepedence produces same result as a test
based on r2dtables", {
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)
expect_equal(a, b)
})
test_that("td_indepedence produces same result as a test
based on r2dtables", {
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)$p.value
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)$p.value
expect_equal(a, b)
})
.7942 - .7936
test_that("td_indepedence produces same result as a test
based on r2dtables", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)$p.value
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)$p.value
expect_equal(a, b, tolerance = 0.001)
})
test_that("td_indepedence produces same result as a test
based on r2dtables", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)$p.value
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)$p.value
expect_equal(a, b, tolerance = 0.003)
})
test_that("td_indepedence produces same result as a test
based on r2dtables", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
#Running tests:
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 100000)$p.value
b <- chisq.test(mat, simulate.p.value = TRUE, B = 100000)$p.value
expect_equal(a, b, tolerance = 0.005)
})
?expect_equal
expect_equal(4, 6, tolerance = 10)
?expect_equivalent
x <- rnorm(300, mean = 5, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
tab_dec
x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
tab_dec
bench::system_time(
a <- chisq.test(mat, simulate.p.value = TRUE, B = 10000)
)
a
bench::system_time(
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 1000)
)
a
x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
tab_dec
bench::system_time(
a <- chisq.test(mat, simulate.p.value = TRUE, B = 2000)
)
a
bench::system_time(
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 1000)
)
a
x <- rnorm(3000, mean = 54, sd = 14)
head(sort(x))
x <- rnorm(3000, mean = 54, sd = 14)
head(sort(x))
x <- rnorm(3000, mean = 54, sd = 14)
x <- rnorm(3000, mean = 54, sd = 14)
head(sort(x))
x <- rnorm(3000, mean = 54, sd = 14)
head(sort(x))
#x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
bench::system_time(
a <- chisq.test(mat, simulate.p.value = TRUE, B = 2000)
)
a
bench::system_time(
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 1000)
)
a
#x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- abs(sam - int * 10)
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
bench::system_time(
a <- chisq.test(mat, simulate.p.value = TRUE, B = 2000)
)
a
bench::system_time(
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 1000)
)
a
tab_dec
rowSums(mat)
colSums(mat)
chisq.test(colSums(mat))
u_int
head(sort(sam))
head(tab_int)
head(tab)
tab["-12"]
i = -1
j = 2
num <- as.character((i * 10) + j)
num
num <- as.character((i * 10) + (i/i * j)) #This changes sign of decimal if it is negative
num
i * 10
-1/-1
-1 * 2 / -1
#x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- abs(sam - int * 10)
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
i = -1
j = 2
if(i >= 0) {
num <- as.character((i * 10) + j)
}
else {
num <- as.character((i * 10) - j) #So that with negative integers -1 and the decimal 2 leads to -12, not -8
}
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
#x <- rnorm(3000, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- abs(sam - int * 10)
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
if(i >= 0) {
num <- as.character((i * 10) + j)
}
else {
num <- as.character((i * 10) - j) #So that with negative integers -1 and the decimal 2 leads to -12, not -8
}
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
mat <- matrix(observed$value, byrow = TRUE, nrow = length(u_int))
mat
tab_dec
bench::system_time(
a <- chisq.test(mat, simulate.p.value = TRUE, B = 2000)
)
a
bench::system_time(
a <- td_independence(x = sam * 0.1,
decimals = 1,
reps = 1000)
)
a
knitr::opts_chunk$set(echo = TRUE)
x <- rnorm(300, mean = 20, sd = 14)
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- abs(sam - int * 10)
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
full_vec(tab_int, tab_dec)
sort(full_vec(tab_int, tab_dec))
x <- c(20, 40, 20, 20, 40, 90)
boot <- c(0:9)
a <- full_vec(x, boot)
b <- c(20:29, 40:49, 90:99)
a
b
x <- rnorm(300, mean = 20, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- abs(sam - int * 10)
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
full_vec(tab_int, tab_dec)
x <- c(20, 40, 20, 20, 40, 90)
boot <- c(0:7)
a <- full_vec(x, boot)
b <- c(20:29, 40:49, 90:99)
a
b
full_vec(u_int, u_dec)
u_int
u_dec
u_int
u_dec
u_int <- sort(abs(unique(int)))
u_dec <- sort(unique(dec))
full_vec(u_int, u_dec)
full_vec(tab_int, tab_dec)
tab_int
tab_dec
