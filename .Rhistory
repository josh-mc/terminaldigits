}')
cppFunction('char char_cpp(char y) {
return y;
}')
char_cpp("234")
char_cpp("234")
cppFunction('CharacterVector char_cpp(CharacterVector y) {
return y;
}')
char_cpp("234")
cppFunction('List table_cpp(IntegerVector x, int y) {
IntegerVector tab = table(x);
CharacterVector m = as<CharacterVector>(y);
int one = tab[m];
List out = List::create(Named("one") = one,
Named("tab") = tab);
return out;
}')
cppFunction('List table_cpp(IntegerVector x, IntegerVector y) {
IntegerVector tab = table(x);
CharacterVector m = as<CharacterVector>(y);
int one = tab[m];
List out = List::create(Named("one") = one,
Named("tab") = tab);
return out;
}')
cppFunction('List table_cpp(IntegerVector x, CharacterVector y) {
IntegerVector tab = table(x);
int one = tab[y];
List out = List::create(Named("one") = one,
Named("tab") = tab);
return out;
}')
cppFunction('List table_cpp(IntegerVector x, String y) {
IntegerVector tab = table(x);
int one = tab[y];
List out = List::create(Named("one") = one,
Named("tab") = tab);
return out;
}')
table_cpp(x, "4")
table_cpp(x, "9")
cppFunction('List table_cpp(IntegerVector x, int y) {
IntegerVector tab = table(x);
String m = as<String>(y);
int one = tab[y];
List out = List::create(Named("one") = one,
Named("tab") = tab);
return out;
}')
library(terminaldigits)
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
a
load_all()
b <- observed_vec(tab_int, tab_dec, tab_sam, u_sam)
b
length(tab_sam)
length(u_sam)
head(tab_sam)
head(u_sam)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
cppFunction('int check_cpp(int a, int b) {
int k = 0;
if(a >= 0)  {
k = (a * 10) + b;
}
// So that with negative integers -1 and the decimal 2 leads to -12, not -8
else {
k = (a * 10) - b;
}
return k;
}')
check_cpp(5, 4)
check_cpp(-5, 3)
cppFunction('IntegerVector check_cpp(int a, int b, int cc, IntegerVector u_sam) {
IntegerVector out(1);
int k = 0;
if(a >= 0)  {
k = (a * 10) + b;
}
// So that with negative integers -1 and the decimal 2 leads to -12, not -8
else {
k = (a * 10) - b;
}
if(k == u_sam[cc]) {
out[0] = tab_sam(cc);
}
else {
out[0] = 0;
}
return out;
}')
cppFunction('IntegerVector check_cpp(int a, int b, int cc, IntegerVector u_sam) {
IntegerVector out(1);
int k = 0;
if(a >= 0)  {
k = (a * 10) + b;
}
// So that with negative integers -1 and the decimal 2 leads to -12, not -8
else {
k = (a * 10) - b;
}
if(k == u_sam[cc]) {
out[0] = u_sam(cc);
}
else {
out[0] = 0;
}
return out;
}')
vec <- c(54, 55)
check_cpp(5, 4, 0, vec)
cppFunction('IntegerVector check_cpp(int a, int b, int cc, IntegerVector u_sam,
IntegerVector tab_sam) {
IntegerVector out(1);
int k = 0;
if(a >= 0)  {
k = (a * 10) + b;
}
// So that with negative integers -1 and the decimal 2 leads to -12, not -8
else {
k = (a * 10) - b;
}
if(k == u_sam[cc]) {
out[0] = tab_sam(cc);
}
else {
out[0] = 0;
}
return out;
}')
tab <- c(3, 2, 1)
check_cpp(5, 4, 0, vec, tab)
vec <- c(55, 55)
tab <- c(3, 2, 1)
check_cpp(5, 4, 0, vec, tab)
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
b <- observed_vec(tab_int, tab_dec, tab_sam, u_sam)
load_all()
b <- observed_vec(tab_int, tab_dec, tab_sam, u_sam)
expect_equal(a, b)
a
b
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
a
tab_int
tab_dec
tab_sam
u_sam
b <- observed_vec(tab_int, tab_dec, tab_sam, u_sam)
b
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
View(observed)
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab_sam[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
a
b <- observed_vec(tab_int, tab_dec, tab_sam, u_sam)
b
load_all()
load_all()
observed_vec(tab_int, tab_dec, tab_sam, u_sam)
load_all()
load_all()
observed_vec(tab_int, tab_dec, tab_sam, u_sam)
u_int
u_dec
load_all()
observed_vec(tab_int, tab_dec, tab_sam, u_sam)
u_int
dec_int
u_dec
observed_vec(u_int, y_dec, tab_sam, u_sam)
observed_vec(u_int, u_dec, tab_sam, u_sam)
test_that("observed_vec same result as in R", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab_sam[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
observed_vec(u_int, u_dec, tab_sam, u_sam)
expect_equal(a, b)
})
test_that("observed_vec same result as in R", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab_sam[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
b <- observed_vec(u_int, u_dec, tab_sam, u_sam)
expect_equal(a, b)
})
load_all()
load_all()
set.seed(490)
x <- rnorm(3000, mean = 154, sd = 34)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
bench::mark(
full_vec(u_int, u_dec)
)
bench::mark(
actual_frac(int,
dec,
length(int))
)
bench::mark(
full_vec(u_int, u_dec)
)
bench::mark(
actual_frac(int,
dec,
length(int))
)
bench::mark(
observed_vec(u_int, u_dec, u_sam, tab_sam)
)
bench::mark(
observed_vec(u_int, u_dec, u_sam, tab_sam)
)
bench::mark(
full_vec(u_int, u_dec)
)
bench::mark(
actual_frac(int,
dec,
length(int))
)
test_that("observed_vec gives expect result", {
u_int <- c(-2, 3, 4, 8)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 42, 81, 82, 84)
#For vec: -21, -22, -23, -24,
#         31, 32, 33, 34,
#         41, 42, 43, 44,
#         81, 82, 83, 84
a <- c(1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
expect_equal(a, b)
})
u_int <- c(-2, 3, 4, 8)
u_dec <- c(1, 2, 3, 4)
test_that("observed_vec gives expect result", {
u_int <- c(-2, 3, 4, 8)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 42, 81, 82, 84)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
#For vec: -21, -22, -23, -24,
#         31, 32, 33, 34,
#         41, 42, 43, 44,
#         81, 82, 83, 84
a <- c(1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
expect_equal(a, b)
})
test_that("observed_vec gives expect result", {
u_int <- c(2, 3, 4, 8)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(21, 24, 33, 42, 42, 81, 82, 84)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
#For vec: -21, -22, -23, -24,
#         31, 32, 33, 34,
#         41, 42, 43, 44,
#         81, 82, 83, 84
a <- c(1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
expect_equal(a, b)
})
u_int <- c(-2, 3, 4, 8)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 42, 81, 82, 84)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
b
u_int <- c(-2, 3, 4, 5)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 42, 51, 52, 54)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
b
u_int <- c(-2, 3, 4, 13)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 42, 131, 132, 134)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
a <- c(1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
v
b
test_that("observed_vec gives same result as in R", {
set.seed(490)
x <- rnorm(300, mean = 54, sd = 14)
#For one decimal
sam <- as.integer(x * 10)
int <- as.integer(x)
dec <- sam - int * 10
tab_sam <- table(sam)
tab_int <- table(int)
tab_dec <- table(dec)
u_int <- sort(unique(int))
u_dec <- sort(unique(dec))
u_sam <- sort(unique(sam))
#This creates a vector of counts for all possible cells
observed <- data.frame(v = 1:(length(u_int) * length(u_dec)))
count <- 1
for(i in u_int)  {
for(j in u_dec)  {
num <- as.character((i * 10) + j)
observed$num[count] <- num
observed$value[count] <- as.integer(tab_sam[num])
if(is.na(observed$value[count])) {
observed$value[count] <- 0
}
count <- count + 1
}}
a <- observed$value
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
expect_equal(a, b)
})
test_that("observed_vec gives expect result", {
u_int <- c(-2, 3, 4, 13)
u_dec <- c(1, 2, 3, 4)
u_sam <- c(-21, -24, 33, 42, 131, 132, 134)
tab_sam <- c(1, 1, 1, 2, 1, 1, 1)
#For vec: -21, -22, -23, -24,
#         31, 32, 33, 34,
#         41, 42, 43, 44,
#         81, 82, 83, 84
a <- c(1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1)
b <- observed_vec(u_int, u_dec, u_sam, tab_sam)
expect_equal(a, b)
})
library(terminaldigits)
library(dplyr)
library(gt)
library(ggplot2)
set.seed(300)
td_simulate(distribution = "normal",
n = 3160,
parameter_1 = 100,
parameter_2 = 15,
decimals = 2,
reps = 100,
simulations = 100)
set.seed(300)
td_simulate(distribution = "normal",
n = 3160,
parameter_1 = 100,
parameter_2 = 15,
decimals = 2,
reps = 200,
simulations = 200)
set.seed(300)
td_simulate(distribution = "normal",
n = 200,
parameter_1 = 100,
parameter_2 = 15,
decimals = 2,
reps = 200,
simulations = 200)
test()
load_all()
test()
load_all()
load_all()
load_all()
load_all()
load_all()
.Last.error.trace
