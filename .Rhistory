use_r("td_independence")
library(devtools)
use_r("td_independence")
document()
document()
use_rcpp()
use_rcpp("tests")
document()
library(terminaldigits)
use_test()
test()
check()
usethis::use_data_raw("decoy")
decoy <- read.csv("http://datacolada.org/appendix/74/Study 3 - Decoy Effect.csv")
View(decoy)
decoy <- decoy_3 %>%
tidyr::pivot_longer(cols = Day1:Day40,
names_to = "day",
values_to = "weight") %>%
dplyr::select(-Group..1.experimental.condition..2..control.condition.) %>%
dplyr::rename(subject = Subject,
workroom = WorkroomNo.)
decoy <- decoy %>%
tidyr::pivot_longer(cols = Day1:Day40,
names_to = "day",
values_to = "weight") %>%
dplyr::select(-Group..1.experimental.condition..2..control.condition.) %>%
dplyr::rename(subject = Subject,
workroom = WorkroomNo.)
View(decoy)
decoy <- read.csv("http://datacolada.org/appendix/74/Study 3 - Decoy Effect.csv")
decoy <- decoy %>%
tidyr::pivot_longer(cols = Day1:Day40,
names_to = "day",
values_to = "weight") %>%
dplyr::select(-Group..1.experimental.condition..2..control.condition.,
-day) %>%
dplyr::rename(subject = Subject,
workroom = WorkroomNo.)
usethis::use_data(decoy, overwrite = TRUE)
use_r("data")
document()
document()
document()
check()
out <- perm_basic(distribution = "normal",
duplicates = 0,
set_n = 100,
set_mean = 20
set_sd = 2,
decimals = 1,
reps = 100,
times = 100,
tolerance = 0)
out <- perm_basic(distribution = "normal",
duplicates = 0,
set_n = 100,
set_mean = 20
set_sd = 2,
decimals = 1,
reps = 100,
times = 100,
tolerance = 0)
out <- perm_basic(distribution = "normal",
duplicates = 0,
set_n = 100,
set_mean = 20,
set_sd = 2,
decimals = 1,
reps = 100,
times = 100,
tolerance = 0)
out <- perm_basic(distribution = "normal",
duplicates = 0,
set_n = 100,
set_mean = 20,
set_sd = 2,
decimals = 1,
reps = 100,
times = 100,
tolerance = 0)
out <- perm_basic(distribution = 1,
duplicates = 0,
set_n = 100,
set_mean = 20,
set_sd = 2,
decimals = 1,
reps = 100,
times = 100,
tolerance = 0)
View(out)
mean(out$d_perm_p <= significance)
mean(out$d_perm_p <= 0.05)
names(out)
g <- names(output)
g <- names(out)
res <- data.frame(g)
res
groups <- names(out)
for(i in groups)  {
out[[i]] <- mean(out[[i]] <= significance)
}
significance <- 0.05
for(i in groups)  {
out[[i]] <- mean(out[[i]] <= significance)
}
View(out)
data.frame()
a <- data.frame()
a$a <- 1
data.frame(1)
a$a <- 2
a <- data.frame(1)
a$b <- 2
a
a <- numeric(5)
a
data.frame(numeric(1))
a <- data.frame(numeric(1))
a
load_all()
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
parameter_2 = 1,
decimals = 1,
reps = 100,
simulations = 100)
View(out)
groups <- names(out)
for(i in groups)  {
i <- mean(out[[i]] <= significance)
}
for(i in groups)  {
i <<- mean(out[[i]] <= significance)
}
groups <- names(out)
for(i in groups)  {
test <- deparse(substitute(i)))
test <- mean(out[[i]] <= significance)
}
for(i in groups)  {
test <- deparse(substitute(i))
test <- mean(out[[i]] <= significance)
}
simulations = 100)
load_all()
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
parameter_2 = 1,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
parameter_2 = 1,
decimals = 1,
reps = 100,
simulations = 100)
for(i in groups) print(i)
for(i in groups) print(unquote(i))
for(i in groups( print(substitute(i))))
)
))
for(i in groups( print(substitute(i)))))
for(i in groups( print(substitute(i)))))
for(i in groups( print(substitute(i))))
)))
for(i in groups) print(substitute(i)))
for(i in groups) print(substitute(i))
for(i in groups) print([[i]])
out[["d_chi_p"]][1]
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
parameter_2 = 1,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
parameter_2 = 1,
decimals = 1,
reps = 100,
simulations = 100)
check()
?is.null
load_all()
load_all()
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 1,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100, parameter_2 = 5
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100, parameter_2 = 5,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "exponential",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "normal",
n = 50,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "normal",
n = 50, duplicates = 2,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "normal",
n = 50, duplicates = 2,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "normal",
n = 50, duplicates = 1,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "normal",
n = 50, duplicates = 1,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
td_simulate(distribution = "uniform",
n = 50, duplicates = 1,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
load_all()
td_simulate(distribution = "uniform",
n = 50, duplicates = 1,
parameter_1 = 100,
decimals = 1,
reps = 100,
simulations = 100)
dim(decoy)
decoy %>% filter(!is.na(deocy)) %>% dim()
decoy %>% filter(!is.na(weight)) %>% dim()
View(decoy)
decoy %>% filter(!is.na(weight)) %>% dim()
library(dplyr)
decoy %>% filter(!is.na(weight)) %>% dim()
td_independence(decoy$weight, decimals = 2)
load_all()
td_independence(decoy$weight, decimals = 2)
load_all()
td_independence(decoy$weight, decimals = 2)
x <- c(1.2, NA, 13, NA, NaN)
x
str(x)
a <- x[!is.na(x)]
a
x <- c(1.2, 13, NA, Nan, Inf)
x <- c(1.2, 13, NA, NaN, Inf)
str(x)
a <- x[!is.na(x)]
a
load_all()
td_independence(decoy$weight, decimals = 2)
load_all()
td_independence(decoy$weight, decimals = 2, reps = 1000)
library(digitTests)
td_independence(sanitizer$value, decimals = 2)
x <- c(0.0, 0.7, 0.1, 1.1, 1.7, 1.3)
x
td_independence(x, decimals = 1)
x <- c(0.0, 0.1, 0.2, 0.3, 1.4, 1.5, 1.1, 1.6)
td_independence(x, decimals = 1)
x <- c(0.0, 0.1, 0.2, 0.3, 1.4, 1.5, 1.1, 1.6, 1.6, 1.6, 1.6, 1.6)
td_independence(x, decimals = 1)
x <- c(0.0, 0.1, 0.2, 0.3, 1.4, 1.5, 1.1, 1.6, 0.0, 0.0, 0.0, 0.0, 0.0)
td_independence(x, decimals = 1)
x <- c(0.0, 0.1, 0.2, 0.3, 1.4, 1.5, 1.1, 1.6, 0.0, 0.0, 0.0, 0.0)
td_independence(x, decimals = 1)
0.00
?print.htest
?group_by()
check()
documenet()
devtools::document()
use_package("discretefit")
use_packages("discretefit")
use_package("discretefit")
use_tidy_description()
use_mit_license()
document()
check()
check()
document()
check()
document()
load_all()
check()
usethis::use_vignette("packages_introduction")
library(devtools)
document()
load_all()
check()
digitTests::rv.test(rnorm(100))
use_packages("digitTests")
library(devtools)
use_package("digitTests")
check()
install.packages("discretefit", dependencies = TRUE)
install.packages("discretefit", dependencies = TRUE)
remove.packages("discretefit")
install.packages("discretefit")
updateR()
