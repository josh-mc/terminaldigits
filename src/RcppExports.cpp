// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dist_in
NumericVector dist_in(int distribution, int set_n, double set_mean, double set_sd);
RcppExport SEXP _terminaldigits_dist_in(SEXP distributionSEXP, SEXP set_nSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< int >::type set_n(set_nSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_in(distribution, set_n, set_mean, set_sd));
    return rcpp_result_gen;
END_RCPP
}
// data_in
NumericVector data_in(int distribution, int set_n, double set_mean, double set_sd, int duplicates);
RcppExport SEXP _terminaldigits_data_in(SEXP distributionSEXP, SEXP set_nSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP, SEXP duplicatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< int >::type set_n(set_nSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    Rcpp::traits::input_parameter< int >::type duplicates(duplicatesSEXP);
    rcpp_result_gen = Rcpp::wrap(data_in(distribution, set_n, set_mean, set_sd, duplicates));
    return rcpp_result_gen;
END_RCPP
}
// violation
NumericVector violation(NumericVector sample_0, int duplicates, int type);
RcppExport SEXP _terminaldigits_violation(SEXP sample_0SEXP, SEXP duplicatesSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sample_0(sample_0SEXP);
    Rcpp::traits::input_parameter< int >::type duplicates(duplicatesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(violation(sample_0, duplicates, type));
    return rcpp_result_gen;
END_RCPP
}
// average_fre
double average_fre(IntegerVector x);
RcppExport SEXP _terminaldigits_average_fre(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(average_fre(x));
    return rcpp_result_gen;
END_RCPP
}
// average_fre2
double average_fre2(IntegerVector x, int n);
RcppExport SEXP _terminaldigits_average_fre2(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(average_fre2(x, n));
    return rcpp_result_gen;
END_RCPP
}
// ft_stat
double ft_stat(int new_n, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _terminaldigits_ft_stat(SEXP new_nSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type new_n(new_nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(ft_stat(new_n, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// rms_stat
double rms_stat(int new_n, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _terminaldigits_rms_stat(SEXP new_nSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type new_n(new_nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(rms_stat(new_n, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// chisq_stat
double chisq_stat(int draws, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _terminaldigits_chisq_stat(SEXP drawsSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_stat(draws, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// g2_stat
double g2_stat(int draws, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _terminaldigits_g2_stat(SEXP drawsSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(g2_stat(draws, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// perm_basic
DataFrame perm_basic(int distribution, int duplicates, int set_n, double set_mean, double set_sd, int decimals, int reps, int times, double tolerance);
RcppExport SEXP _terminaldigits_perm_basic(SEXP distributionSEXP, SEXP duplicatesSEXP, SEXP set_nSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP, SEXP decimalsSEXP, SEXP repsSEXP, SEXP timesSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< int >::type duplicates(duplicatesSEXP);
    Rcpp::traits::input_parameter< int >::type set_n(set_nSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    Rcpp::traits::input_parameter< int >::type decimals(decimalsSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_basic(distribution, duplicates, set_n, set_mean, set_sd, decimals, reps, times, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// terminal_independence
List terminal_independence(NumericVector x, int decimals, double reps, double tolerance, int type);
RcppExport SEXP _terminaldigits_terminal_independence(SEXP xSEXP, SEXP decimalsSEXP, SEXP repsSEXP, SEXP toleranceSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type decimals(decimalsSEXP);
    Rcpp::traits::input_parameter< double >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(terminal_independence(x, decimals, reps, tolerance, type));
    return rcpp_result_gen;
END_RCPP
}
// int_dec
List int_dec(NumericVector s, int decimals);
RcppExport SEXP _terminaldigits_int_dec(SEXP sSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(int_dec(s, decimals));
    return rcpp_result_gen;
END_RCPP
}
// observed_vec
IntegerVector observed_vec(IntegerVector u_int, IntegerVector u_dec, IntegerVector u_sam, IntegerVector tab_sam);
RcppExport SEXP _terminaldigits_observed_vec(SEXP u_intSEXP, SEXP u_decSEXP, SEXP u_samSEXP, SEXP tab_samSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type u_int(u_intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type u_dec(u_decSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type u_sam(u_samSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tab_sam(tab_samSEXP);
    rcpp_result_gen = Rcpp::wrap(observed_vec(u_int, u_dec, u_sam, tab_sam));
    return rcpp_result_gen;
END_RCPP
}
// tab_it
IntegerVector tab_it(IntegerVector x, int bins, int a, int b);
RcppExport SEXP _terminaldigits_tab_it(SEXP xSEXP, SEXP binsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_it(x, bins, a, b));
    return rcpp_result_gen;
END_RCPP
}
// perm_vector
IntegerVector perm_vector(IntegerVector v, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _terminaldigits_perm_vector(SEXP vSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_vector(v, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// expected_cells
NumericVector expected_cells(NumericVector r_frac, NumericVector c_frac);
RcppExport SEXP _terminaldigits_expected_cells(SEXP r_fracSEXP, SEXP c_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r_frac(r_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_frac(c_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_cells(r_frac, c_frac));
    return rcpp_result_gen;
END_RCPP
}
// out_vector_cpp
IntegerVector out_vector_cpp(IntegerVector c_sums);
RcppExport SEXP _terminaldigits_out_vector_cpp(SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(out_vector_cpp(c_sums));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_terminaldigits_dist_in", (DL_FUNC) &_terminaldigits_dist_in, 4},
    {"_terminaldigits_data_in", (DL_FUNC) &_terminaldigits_data_in, 5},
    {"_terminaldigits_violation", (DL_FUNC) &_terminaldigits_violation, 3},
    {"_terminaldigits_average_fre", (DL_FUNC) &_terminaldigits_average_fre, 1},
    {"_terminaldigits_average_fre2", (DL_FUNC) &_terminaldigits_average_fre2, 2},
    {"_terminaldigits_ft_stat", (DL_FUNC) &_terminaldigits_ft_stat, 3},
    {"_terminaldigits_rms_stat", (DL_FUNC) &_terminaldigits_rms_stat, 3},
    {"_terminaldigits_chisq_stat", (DL_FUNC) &_terminaldigits_chisq_stat, 3},
    {"_terminaldigits_g2_stat", (DL_FUNC) &_terminaldigits_g2_stat, 3},
    {"_terminaldigits_perm_basic", (DL_FUNC) &_terminaldigits_perm_basic, 9},
    {"_terminaldigits_terminal_independence", (DL_FUNC) &_terminaldigits_terminal_independence, 5},
    {"_terminaldigits_int_dec", (DL_FUNC) &_terminaldigits_int_dec, 2},
    {"_terminaldigits_observed_vec", (DL_FUNC) &_terminaldigits_observed_vec, 4},
    {"_terminaldigits_tab_it", (DL_FUNC) &_terminaldigits_tab_it, 4},
    {"_terminaldigits_perm_vector", (DL_FUNC) &_terminaldigits_perm_vector, 3},
    {"_terminaldigits_expected_cells", (DL_FUNC) &_terminaldigits_expected_cells, 2},
    {"_terminaldigits_out_vector_cpp", (DL_FUNC) &_terminaldigits_out_vector_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_terminaldigits(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
